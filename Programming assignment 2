# Peer-graded Assignment: Programming Assignment 2: Lexical Scoping
> 
> # The function creates a  "matrix" object which cache its inverse.
> 
> makeCacheMatrix <- function(x = matrix()) {
+   inv <- NULL
+   set <- function(y) {
+     x <<- y
+     inv <<- NULL
+   }
+   get <- function() x
+   setInverse <- function(inverse) inv <<- inverse
+   getInverse <- function() inv
+   list(set = set,
+        get = get,
+        setInverse = setInverse,
+        getInverse = getInverse)
+ }
> 
> #This function computes the inverse of the "matrix" returned by makeCacheMatrix from above
> 
> cacheSolve <- function(x, ...) {
+   ## Return a matrix that is the inverse of 'x'
+   inv <- x$getInverse()
+   if (!is.null(inv)) {
+     message("getting cached data")
+     return(inv)
+   }
+   mat <- x$get()
+   inv <- solve(mat, ...)
+   x$setInverse(inv)
+   inv
+ }
> 
> my_matrix <- makeCacheMatrix(matrix(100:103, 2, 2))
> 
> my_matrix$get()
     [,1] [,2]
[1,]  100  102
[2,]  101  103
> 
> my_matrix$getInverse()
NULL
> 
> cacheSolve(my_matrix)
      [,1] [,2]
[1,] -51.5   51
[2,]  50.5  -50
> 
> cacheSolve(my_matrix)
getting cached data
      [,1] [,2]
[1,] -51.5   51
[2,]  50.5  -50
> 
> my_matrix$getInverse()
      [,1] [,2]
[1,] -51.5   51
[2,]  50.5  -50
> 
> my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
> 
> my_matrix$get()
     [,1] [,2]
[1,]    2    1
[2,]    2    4
> 
> my_matrix$getInverse()
NULL
> 
> cacheSolve(my_matrix)
           [,1]       [,2]
[1,]  0.6666667 -0.1666667
[2,] -0.3333333  0.3333333
> 
> cacheSolve(my_matrix)
getting cached data
           [,1]       [,2]
[1,]  0.6666667 -0.1666667
[2,] -0.3333333  0.3333333
> 
> my_matrix$getInverse()
           [,1]       [,2]
[1,]  0.6666667 -0.1666667
[2,] -0.3333333  0.3333333
> 
